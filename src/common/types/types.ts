import { ResultCode } from "@/common/enums"
import { z } from "zod"

// –û–±—ã—á–Ω–∞—è FieldError —Å—Ö–µ–º–∞
export const FieldErrorSchema = z.object({
  error: z.string(),
  field: z.string(),
})

// –§—É–Ω–∫—Ü–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è BaseResponseSchema —Å generic'–æ–º –¥–ª—è data
// –í–∞—Ä–∏–∞–Ω—Ç 1 (—Å–∞–º—ã–π —á–µ—Å—Ç–Ω—ã–π) ‚Äî —Å–¥–µ–ª–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–≥—Ä—É–∂–∞–µ–º–æ–π:
export const BaseResponseSchema = <T extends z.ZodTypeAny>(dataSchema: T) =>
  z.object({
    data: dataSchema,
    fieldsErrors: z.array(FieldErrorSchema),
    messages: z.array(z.string()),
    resultCode: z.nativeEnum(ResultCode),
  })

export type BaseResponse<T = {}> = { //
  data: T
  fieldsErrors: z.infer<typeof FieldErrorSchema>[]
  messages: string[]
  resultCode: ResultCode
}

export type RequestStatus = "idle" | "loading" | "succeeded" | "failed"

// ------------------------OLD------------------------üë¥üë¥üë¥
// export type FieldError = {
//   error: string
//   field: string
// }
//
// export type BaseResponse<T = {}> = { //
//   data: T
//   fieldsErrors: FieldError[]
//   messages: string[]
//   resultCode: ResultCode
// }

// –í–∞—Ä–∏–∞–Ω—Ç 2 (—Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º)
// –ê –µ—Å–ª–∏ –ø—Ä—è–º –æ—á–µ–Ω—å —Ö–æ—á–µ—à—å –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, —Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–µ–µ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–æ—Ç —Ç–∞–∫:
// export const BaseResponseSchema = (
//   dataSchema: z.ZodTypeAny = z.object({})
// ) =>
//   z.object({
//     data: dataSchema,
//     fieldsErrors: z.array(FieldErrorSchema),
//     messages: z.array(z.string()),
//     resultCode: z.nativeEnum(ResultCode),
//   })
