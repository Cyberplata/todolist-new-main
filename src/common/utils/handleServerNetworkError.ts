import { setAppErrorAC, setAppStatusAC } from "@/app/app-slice.ts"
import type { Dispatch } from "@reduxjs/toolkit"
import axios, { type AxiosError } from "axios"
import { z } from "zod"

// pattern matching engine ü§ìü§ìü§ì Variant I - GPT ‚úÖ‚úÖ‚úÖ
// üìå –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫.
// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–∞—Å—Å–∏–≤ —Å { predicate, handler }, –≥–¥–µ:
// - predicate: –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–∏–ø –æ—à–∏–±–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, AxiosError, ZodError, Error).
// - handler: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± –æ—à–∏–±–∫–µ.
// –î–ª—è AxiosError –ø—Ä–∏–≤–æ–¥–∏–º —Ç–∏–ø –∫ AxiosError<{ message?: string }>, —á—Ç–æ–±—ã TypeScript –∑–Ω–∞–ª –æ –Ω–∞–ª–∏—á–∏–∏ –ø–æ–ª—è message –≤ response.data.
// –†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É TS2339 (Property 'message' does not exist on type '{}')

type ErrorHandlerEntry = {
  predicate: (error: unknown) => boolean
  handler: (error: unknown) => string
}

export const handleServerNetworkError = (dispatch: Dispatch, error: unknown) => {
  const handlers: ErrorHandlerEntry[] = [
    {
      predicate: (e): e is AxiosError => axios.isAxiosError(e),
      handler: (e) => {
        const err = e as AxiosError<{ message?: string }>
        return err.response?.data?.message || err.message
      },
    },
    {
      predicate: (e): e is z.ZodError => e instanceof z.ZodError,
      handler: (e) => {
        const err = e as z.ZodError
        console.table(err.issues)
        return 'Zod error. –°–º–æ—Ç—Ä–∏ –∫–æ–Ω—Å–æ–ª—å'
      },
    },
    {
      predicate: (e): e is Error => e instanceof Error,
      handler: (e) => {
        const err = e as Error
        return `Native error: ${err.message}`
      },
    },
  ]

  const found = handlers.find(({ predicate }) => predicate(error))

  const errorMessage = found
    ? found.handler(error)
    : JSON.stringify(error)

  dispatch(setAppErrorAC({ error: errorMessage }))
  dispatch(setAppStatusAC({ status: 'failed' }))
}

// Variant II ‚úÖ‚úÖ‚úÖ
// export const handleServerNetworkError = (dispatch: Dispatch, error: unknown) => {
//   let errorMessage
//
//   switch (true) {
//     case axios.isAxiosError(error):
//       errorMessage = error.response?.data?.message || error.message
//       break
//
//     case error instanceof z.ZodError:
//       console.table(error.issues)
//       errorMessage = 'Zod error. –°–º–æ—Ç—Ä–∏ –∫–æ–Ω—Å–æ–ª—å'
//       break
//
//     case error instanceof Error:
//       errorMessage = `Native error: ${error.message}`
//       break
//
//     default:
//       errorMessage = JSON.stringify(error)
//   }
//
//   dispatch(setAppErrorAC({ error: errorMessage }))
//   dispatch(setAppStatusAC({ status: 'failed' }))
// }